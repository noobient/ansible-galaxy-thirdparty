---
- name: Install versionlock plugin
  dnf:
    name: python3-dnf-plugin-versionlock
    state: latest
  register: installed_dnfversionlock
  when: installed_dnfversionlock is not defined

# use inline jinja conditional instead of when: so that thirdparty_installedversion is always defined for the next step
- name: Check if matching version is installed
  shell:
    cmd: "{% if version is defined %}rpm -qa | grep {{ package }}-{{ version }}{% else %}false{% endif %}"
  failed_when: false
  changed_when: false
  register: thirdparty_installedversion

# rc=1 when not locked
- name: "Delete {{ package }} version lock" # noqa command-instead-of-module
  command:
    cmd: "dnf versionlock delete {{ package }}"
  register: thirdparty_unlock
  changed_when: (dnflock_del_str in thirdparty_unlock.stderr)
  failed_when: (thirdparty_unlock.rc != 0) and (thirdparty_unlock.rc != 1)
  when: (version is not defined) or (thirdparty_installedversion.rc != 0)

- name: "Install {{ name }}"
  dnf:
    name: "{{ package }}{% if version is defined and version | length > 0 %}-{{ version }}{% endif %}"
    state: "{% if version is defined and version | length > 0 %}present{% else %}latest{% endif %}"
    allow_downgrade: "{% if version is defined and version | length > 0 %}yes{% else %}no{% endif %}"
  register: thirdparty_install

- name: "Add {{ package }} version lock" # noqa command-instead-of-module
  command:
    cmd: "dnf versionlock add {{ package }}"
  register: thirdparty_lock
  changed_when: (dnflock_add_str in thirdparty_lock.stdout)
  when: (version is defined) and (thirdparty_installedversion.rc != 0)

# installing the package adds noise to the repo file in postinst, fix it
- name: "Fix {{ name }} repo file"
  include_tasks: repo.yml
  when: (thirdparty_install.changed) and (repo_overwrite is defined) and (repo_overwrite|bool)

---
- name: Install versionlock plugin
  yum:
    name: "{% if ansible_pkg_mgr == 'dnf' %}python3-dnf-plugin-versionlock{% else %}yum-versionlock{% endif %}"
    state: latest
  register: installed_yumversionlock
  when: installed_yumversionlock is not defined

# use inline jinja conditional instead of when: so that thirdparty_installedversion is always defined for the next step
- name: Check if matching version is installed
  shell:
    cmd: "{% if version is defined %}rpm -qa | grep {{ package }}-{{ version }}{% else %}false{% endif %}"
  failed_when: false
  changed_when: false
  register: thirdparty_installedversion

# rc=1 when not locked
- name: "Delete {{ package }} version lock"
  command:
    cmd: "yum versionlock delete {{ package }}"
  register: thirdparty_unlock
  changed_when: (yumlock_del_str not in thirdparty_unlock.stderr)
  failed_when: (thirdparty_unlock.rc != 0) and (thirdparty_unlock.rc != 1)
  when: (item.version is not defined) or (thirdparty_installedversion.rc != 0)

- name: "Install {{ name }}"
  yum:
    name: "{{ package }}{% if version is defined and version | length > 0 %}-{{ version }}{% endif %}"
    state: "{% if version is defined and version | length > 0 %}present{% else %}latest{% endif %}"
    allow_downgrade: "{% if version is defined and version | length > 0 %}yes{% else %}no{% endif %}"
  register: thirdparty_install

- name: "Add {{ package }} version lock"
  command:
    cmd: "yum versionlock add {{ package }}"
  register: thirdparty_lock
  changed_when: (yumlock_add_str not in thirdparty_lock.stdout)
  when: (item.version is defined) and (thirdparty_installedversion.rc != 0)

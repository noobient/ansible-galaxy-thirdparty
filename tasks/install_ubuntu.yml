---
# if version is undefined, unhold to ensure the latest is installed
# rc = 100 when 'Unable to locate package' = not installed yet
- name: "Unhold {{ package }}"
  command:
    cmd: "apt-mark unhold {{ package }}"
  register: thirdparty_unhold
  changed_when: ('was already not hold.' not in thirdparty_unhold.stdout) and (thirdparty_unhold.rc != 100)
  failed_when: (thirdparty_unhold.rc != 0) and (thirdparty_unhold.rc != 100)
  when: version is not defined

# allow upgrades from one specified version to another
- name: "Unhold {{ package }}"
  shell:
    cmd: "apt install --simulate {{ package }}={{ version }} | grep -E 'The following packages will be upgraded{% if allow_downgrade is defined and allow_downgrade == True %}|The following packages will be DOWNGRADED{% endif %}' && apt-mark unhold {{ package }}"
  failed_when: false
  changed_when: thirdparty_unhold2.rc == 0
  register: thirdparty_unhold2
  when: version is defined

- name: "Install {{ name }}"
  apt:
    name: "{{ package }}{% if version is defined and version | length > 0 %}={{ version }}{% endif %}"
    state: "{% if version is defined and version | length > 0 %}present{% else %}latest{% endif %}"
    update_cache: true
    install_recommends: "{{ install_recommends | default('yes') }}"
    dpkg_options: "force-confold,force-confdef{% if allow_downgrade is defined and allow_downgrade == True %},force-downgrade{% endif %}"
  register: thirdparty_install

- name: "Hold {{ package }}"
  command:
    cmd: "apt-mark hold {{ package }}"
  register: thirdparty_hold
  changed_when: ('was already set on hold.' not in thirdparty_hold.stdout)
  when: version is defined

# enforce upgrade if the repo provides a newer version of an Ubuntu package
# e.g. PostgreSQL's libpq/libgeos packages
- name: Update all packages
  apt:
    upgrade: dist
    update_cache: false

# remove the superseded Ubuntu packages
- name: Remove obsolete packages
  apt:
    autoremove: true

# installing the package adds noise to the repo file in postinst, fix it
- name: "Fix {{ name }} repo file"
  include_tasks: repo.yml
  when: (thirdparty_install.changed) and (repo_overwrite is defined) and (repo_overwrite|bool)
